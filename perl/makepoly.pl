#!/usr/bin/perl -w

# generates lines of the form
# PolymerMidStepDir(TYPE,LX,LY,OLDLDIR,OLDLREV,RX,RY,OLDRDIR,OLDRREV,DX,DY,NEWLDIR,NEWLREV,NEWRDIR,NEWRREV,RATE)
# PolymerLeftmostStepDir(TYPE,RX,RY,OLDRDIR,OLDRREV,DX,DY,NEWRDIR,NEWRREV,RATE)
# PolymerRightmostStepDir(TYPE,LX,LY,OLDLDIR,OLDLREV,DX,DY,NEWLDIR,NEWLREV,RATE)

print "// generated by $0\n";

my $defs = <<END;

#define PolymerDetachLinkDir(TYPE,BUILDER,X,Y,DIR,REV,FLAGVAR,REVFLAGVAR,DIRVAR,REVDIRVAR,RATE)
  {
      <rate (RATE/3)>;
      loc orig(0,0);
      loc nbr(X,Y);
      if orig.FLAGVAR = 1;
      if orig.DIRVAR = DIR;
      if nbr.type != TYPE;
      if nbr.type != BUILDER;
      do orig.FLAGVAR = 0;
  }
  {
      <rate (RATE/3)>;
      loc orig(0,0);
      loc nbr(X,Y);
      if orig.FLAGVAR = 1;
      if orig.DIRVAR = DIR;
      if nbr.type = TYPE;
      if nbr.REVFLAGVAR != 1;
      do orig.FLAGVAR = 0;
  }
  {
      <rate (RATE/3)>;
      loc orig(0,0);
      loc nbr(X,Y);
      if orig.FLAGVAR = 1;
      if orig.DIRVAR = DIR;
      if nbr.type = TYPE;
      if nbr.REVFLAGVAR = 1;
      if nbr.REVDIRVAR != REV;
      do orig.FLAGVAR = 0;
  }

#define PolymerDetachDir(TYPE,BUILDER,X,Y,DIR,REV,RATE)
PolymerDetachLinkDir(TYPE,BUILDER,X,Y,DIR,REV,lflag,rflag,ldir,rdir,(RATE/2));
PolymerDetachLinkDir(TYPE,BUILDER,X,Y,DIR,REV,rflag,lflag,rdir,ldir,(RATE/2));

#define PolymerDetach(TYPE,BUILDER,RATE)
PolymerDetachDir(TYPE,BUILDER,0,-1,0,4,(RATE/8));
PolymerDetachDir(TYPE,BUILDER,+1,-1,1,5,(RATE/8));
PolymerDetachDir(TYPE,BUILDER,+1,0,2,6,(RATE/8));
PolymerDetachDir(TYPE,BUILDER,+1,+1,3,7,(RATE/8));
PolymerDetachDir(TYPE,BUILDER,0,+1,4,0,(RATE/8));
PolymerDetachDir(TYPE,BUILDER,-1,+1,5,1,(RATE/8));
PolymerDetachDir(TYPE,BUILDER,-1,0,6,2,(RATE/8));
PolymerDetachDir(TYPE,BUILDER,-1,-1,7,3,(RATE/8));

#define PolymerDrain(RATE)
  {
      <rate RATE>;
      loc orig(0,0);
      if orig.lflag = 0;
      if orig.rflag = 0;
      do orig = empty;
  }

#define PolymerMidStepDir(TYPE,LX,LY,OLDLDIR,OLDLREV,RX,RY,OLDRDIR,OLDRREV,DX,DY,NEWLDIR,NEWLREV,NEWRDIR,NEWRREV,RATE)
  {
    <rate RATE>;
    loc orig(0,0);
    loc next(DX,DY);
    loc left(LX,LY);
    loc right(RX,RY);
    if orig.lflag = 1;
    if orig.ldir = OLDLDIR;
    if left.type = TYPE;
    if left.rflag = 1;
    if left.rdir = OLDLREV;
    if orig.rflag = 1;
    if orig.rdir = OLDRDIR;
    if right.type = TYPE;
    if right.lflag = 1;
    if right.ldir = OLDRREV;
    if next.type = empty;
    do next = orig;
    do next.ldir = NEWLDIR;
    do next.rdir = NEWRDIR;
    do left.rdir = NEWLREV;
    do right.ldir = NEWRREV;
    do orig = empty;
  }

#define PolymerLeftmostStepDir(TYPE,RX,RY,OLDRDIR,OLDRREV,DX,DY,NEWRDIR,NEWRREV,RATE)
  {
    <rate RATE>;
    loc orig(0,0);
    loc next(DX,DY);
    loc right(RX,RY);
    if orig.lflag = 0;
    if orig.rflag = 1;
    if orig.rdir = OLDRDIR;
    if right.type = TYPE;
    if right.lflag = 1;
    if right.ldir = OLDRREV;
    if next.type = empty;
    do next = orig;
    do next.rdir = NEWRDIR;
    do right.ldir = NEWRREV;
    do orig = empty;
  }

#define PolymerRightmostStepDir(TYPE,LX,LY,OLDLDIR,OLDLREV,DX,DY,NEWLDIR,NEWLREV,RATE)
  {
    <rate RATE>;
    loc orig(0,0);
    loc next(DX,DY);
    loc left(LX,LY);
    if orig.rflag = 0;
    if orig.lflag = 1;
    if orig.ldir = OLDLDIR;
    if left.type = TYPE;
    if left.rflag = 1;
    if left.rdir = OLDLREV;
    if next.type = empty;
    do next = orig;
    do next.ldir = NEWLDIR;
    do left.rdir = NEWLREV;
    do orig = empty;
  }

#define PolymerStep(TYPE,BUILDER,RATE)
PolymerLeftmostStep(TYPE,(RATE/3));
PolymerRightmostStep(TYPE,(RATE/3));
PolymerMidStep(TYPE,(RATE/3));
PolymerDetach(TYPE,BUILDER,(RATE/30));
PolymerDrain((RATE/30));


END
    ;
$defs =~ s/(\n[^\#])/\\$1/g;
print $defs;

print "#define PolymerMidStep(TYPE,RATE)\\\n";
for (my $lx = -1; $lx <= 1; ++$lx) {
    for (my $ly = -1; $ly <= 1; ++$ly) {

	for (my $rx = -1; $rx <= 1; ++$rx) {
	    for (my $ry = -1; $ry <= 1; ++$ry) {

		for (my $dx = -1; $dx <= 1; ++$dx) {
		    for (my $dy = -1; $dy <= 1; ++$dy) {

			if (($dx || $dy) && ($lx || $ly) && ($rx || $ry)
			    && !same($dx,$dy,$lx,$ly) && !same($dx,$dy,$rx,$ry) && !same($rx,$ry,$lx,$ly)
			    && adjacent($dx,$dy,$lx,$ly) && adjacent($dx,$dy,$rx,$ry)) {

			    print "PolymerMidStepDir(TYPE,$lx,$ly," . dirpair($lx,$ly) . ",$rx,$ry," . dirpair($rx,$ry) . ",$dx,$dy," . dirpair($lx-$dx,$ly-$dy) . "," . dirpair($rx-$dx,$ry-$dy) . ",(RATE/56));\\\n";
			}

		    }
		}
	    }
	}
    }
}
print "\n";

print "#define PolymerLeftmostStep(TYPE,RATE)\\\n";
for (my $rx = -1; $rx <= 1; ++$rx) {
    for (my $ry = -1; $ry <= 1; ++$ry) {

	for (my $dx = -1; $dx <= 1; ++$dx) {
	    for (my $dy = -1; $dy <= 1; ++$dy) {

		if (($dx || $dy) && ($rx || $ry)
		    && !same($dx,$dy,$rx,$ry)
		    && adjacent($dx,$dy,$rx,$ry)) {

		    print "PolymerLeftmostStepDir(TYPE,$rx,$ry," . dirpair($rx,$ry) . ",$dx,$dy," . dirpair($rx-$dx,$ry-$dy) . ",(RATE/24));\\\n";
		}
	    }
	}
    }
}
print "\n";

print "#define PolymerRightmostStep(TYPE,RATE)\\\n";
for (my $lx = -1; $lx <= 1; ++$lx) {
    for (my $ly = -1; $ly <= 1; ++$ly) {

	for (my $dx = -1; $dx <= 1; ++$dx) {
	    for (my $dy = -1; $dy <= 1; ++$dy) {
		if (($dx || $dy) && ($lx || $ly)
		    && !same($dx,$dy,$lx,$ly)
		    && adjacent($dx,$dy,$lx,$ly)) {

		    print "PolymerRightmostStepDir(TYPE,$lx,$ly," . dirpair($lx,$ly) . ",$dx,$dy," . dirpair($lx-$dx,$ly-$dy) . ",(RATE/24));\\\n";
		}
	    }
	}
    }
}
print "\n";

sub same {
    my ($x1, $y1, $x2, $y2) = @_;
    return $x1==$x2 && $y1==$y2;
}

sub adjacent {
    my ($x1, $y1, $x2, $y2) = @_;
    return abs($x1-$x2) <= 1 && abs($y1-$y2) <= 1 && !($x1==$x2 && $y1==$y2);
}

sub dirpair {
    my ($dx, $dy) = @_;
    return dir($dx,$dy) . "," . dir(-$dx,-$dy);
}

sub dir {
    my ($dx, $dy) = @_;
    if ($dx == 0 && $dy == -1) { return 0; }
    elsif ($dx == +1 && $dy == -1) { return 1; }
    elsif ($dx == +1 && $dy == 0) { return 2; }
    elsif ($dx == +1 && $dy == +1) { return 3; }
    elsif ($dx == 0 && $dy == +1) { return 4; }
    elsif ($dx == -1 && $dy == +1) { return 5; }
    elsif ($dx == -1 && $dy == 0) { return 6; }
    elsif ($dx == -1 && $dy == -1) { return 7; }
    die "Can't get dir for ($dx,$dy)";
}

sub abs {
    my ($x) = @_;
    return $x < 0 ? -$x : $x;
}

sub min {
    my ($min, @x) = @_;
    for my $x (@x) { $min = $x if $x < $min }
    return $min;
}

sub max {
    my ($max, @x) = @_;
    for my $x (@x) { $max = $x if $x > $max }
    return $max;
}
