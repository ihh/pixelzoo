package Zoo::Model::DB;

use strict;
use base 'Catalyst::Model::DBIC::Schema';

__PACKAGE__->config(
    schema_class => 'Zoo::Schema',
    
    connect_info => {
        dsn => 'dbi:SQLite:zoo.db',
        user => '',
        password => '',
        on_connect_do => q{PRAGMA foreign_keys = ON},
    }
);

=head1 NAME

Zoo::Model::DB - Catalyst DBIC Schema Model

=head1 SYNOPSIS

See L<Zoo>

=head1 DESCRIPTION

L<Catalyst::Model::DBIC::Schema> Model using schema L<Zoo::Schema>

=head1 METHODS

=cut

=head2 worlds

Get a list of L<Zoo::Schema::Result::World> identifiers.

=cut

sub worlds {
    my ($self) = @_;
    my $world = $self->resultset('World')->all;
    return $world;
}


=head2 world_by_id

Get a L<Zoo::Schema::Result::World> object, given its identifier.

=cut

sub world_by_id {
    my ($self, $worldId) = @_;
#    $self->storage->debug(1);
    my $world = $self->resultset('World')->find($worldId);
    return $world;
}

=head2 particles_by_name

Get a list of L<Zoo::Schema::Result::Particle> objects, given a list of their name identifiers.

=cut

sub particles_by_name {
    my ($self, @particle_names) = @_;
    my @particles = $self->resultset('Particle')->search([map ({ 'name' => $_ }, @particle_names)]);
    return @particles;
}

=head2 descendant_particles

Get the list of L<Zoo::Schema::Result::Particle> objects that are named by, or downstream of all the particles named by, a particular L<Twiggy> object (according to the dependency table).

=cut

sub descendant_particles {
    my ($self, $twig) = @_;
    my @particle_names = $twig->particle_names;
    my @particles = $self->particles_by_name (@particle_names);
    my @descendants = map ($_->descendants, @particles);
    my %descendant_hash = map (($_->name => $_), @particles, @descendants);
    return values %descendant_hash;
}

=head1 GENERATED BY

Catalyst::Helper::Model::DBIC::Schema - 0.48

=head1 AUTHOR

Ian Holmes

=head1 LICENSE

This library is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

1;
