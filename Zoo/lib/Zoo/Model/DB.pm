package Zoo::Model::DB;

use strict;
use base 'Catalyst::Model::DBIC::Schema';

__PACKAGE__->config(
    schema_class => 'Zoo::Schema',
    
    connect_info => {
        dsn => 'dbi:SQLite:zoo.db',
        user => '',
        password => '',
        on_connect_do => q{PRAGMA foreign_keys = ON},
    }
);

=head1 NAME

Zoo::Model::DB - Catalyst DBIC Schema Model

=head1 SYNOPSIS

See L<Zoo>

=head1 DESCRIPTION

L<Catalyst::Model::DBIC::Schema> Model using schema L<Zoo::Schema>

=head1 METHODS

=cut


=head2 worlds

=cut

sub worlds {
    my ($self) = @_;
    my $world = $self->resultset('World')->all;
    return $world;
}


=head2 world_by_id

=cut

sub world_by_id {
    my ($self, $worldId) = @_;
    my $world = $self->resultset('World')->find($worldId);
    return $world;
}


=head2 particles_by_name

=cut

sub particles_by_name {
    my ($self, @particle_names) = @_;
    my @particles = $self->resultset('Particle')->search([map ({ 'name' => $_ }, @particle_names)]);
    return @particles;
}

=head2 downstream_particle_names

=cut

sub downstream_particle_names {
    my ($self, @particle_names) = @_;
    my @particles = $self->particles_by_name (@particle_names);
    my %downstream_name_count;
    for my $particle (@particles) {
	for my $downstream_name ($particle->dependency_downstream_names) {
	    ++$downstream_name_count{$downstream_name};
	}
    }
    return sort { $downstream_name_count{$a} <=> $downstream_name_count{$b} } keys %downstream_name_count;
}


=head2 downstream_particles

=cut

sub downstream_particles {
    my ($self, @particle_names) = @_;
    my @downstream_particle_names = $self->downstream_particle_names (@particle_names);
    my @downstream_particles = $self->particles_by_name (@downstream_particle_names);
    return @downstream_particles;
}


=head1 GENERATED BY

Catalyst::Helper::Model::DBIC::Schema - 0.48

=head1 AUTHOR

Ian Holmes

=head1 LICENSE

This library is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

1;
