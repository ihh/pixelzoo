<!--
This DTD defines the PixelZoo XML game format.
-->

<!-- An element representing a PixelZoo Game, including the Board, the Tools, and the Goals. -->
<!ELEMENT game (board,rate,tool*,toolset?,protect?)>

<!-- Rate -->
<!ELEMENT rate (#PCDATA)>

<!-- Globally disallow tool use over a particular set of Board cells. -->
<!ELEMENT toolset (scheme|(disallow*))>

<!-- Write-protect particular Board cells. -->
<!ELEMENT protect (scheme|(cell*))>
<!ELEMENT cell (x,y,z)>

<!-- The co-ordinates of a Board cell.

Generally specified relative to the current cell (e.g. the one whose update rule is being executed). -->
<!ELEMENT pos (x?,y?,z?)>
<!ATTLIST pos mode (direct|indirect) #IMPLIED>
<!ELEMENT x (#PCDATA)>
<!ELEMENT y (#PCDATA)>
<!ELEMENT z (#PCDATA)>

<!-- A Tool.

Places a single particle ("state"), or a complex brush pattern ("brush"), wherever the player points it.

Properties include spray rate ("spray") and diameter ("size"),
initial reserve ("reserve") and maximum ("maxreserve"), recharge rate ("recharge").

Can also be selectively prohibited from overwriting certain cell co-ordinates or pixel types ("overwrite").
-->
<!ELEMENT tool (scheme|(name,size,brush?,(state|hexstate|gstate|gvars)?,overwrite?,spray?,reserve?,recharge?,maxreserve?))>
<!ELEMENT brush (center?,intensity?,pattern?)>
<!ELEMENT center (x,y)>
<!ELEMENT intensity (spot+)>
<!ELEMENT spot (x,y,rate?)>
<!ELEMENT pattern (pixel+)>
<!ELEMENT pixel (x,y,(state|hexstate|gstate|gvars))>
<!ELEMENT overwrite (disallow*,(state|hexstate|gstate|gvars)*,mask?)>
<!ELEMENT disallow (x,y)>

<!-- A 64-bit decimal integer representing the state of a cell on the Board. -->
<!ELEMENT state (#PCDATA)>

<!-- A 64-bit hexadecimal integer representing the state of a cell on the Board. -->
<!ELEMENT hexstate (#PCDATA)>

<!-- The name of a type of particle (a "type"). -->
<!ELEMENT gstate (#PCDATA)>

<!-- The name of a type of particle (a "type"). Will be returned as a state index (i.e. left-shifted 48 bits). -->
<!ELEMENT gtype (#PCDATA)>

<!-- Type + vars. -->
<!ELEMENT gvars (type,val*)>
<!ELEMENT val (#PCDATA)>
<!ATTLIST val var CDATA #REQUIRED>

<!-- Tool info -->
<!ELEMENT name (#PCDATA)>
<!ELEMENT spray (#PCDATA)>
<!ELEMENT reserve (#PCDATA)>
<!ELEMENT recharge (#PCDATA)>
<!ELEMENT maxreserve (#PCDATA)>

<!-- A 64-bit hexadecimal mask. -->
<!ELEMENT mask (#PCDATA)>
<!ELEMENT vmask (type,var)>
<!ELEMENT tmask EMPTY>

<!ELEMENT var (#PCDATA)>

<!-- A 16-bit decimal integer representing the type of a cell on the Board
(equal to the upper 16 bits of the state).
Determines the type of the cell, i.e. its color, its name, the rate and manner in which it is updated, etc. -->
<!ELEMENT type (#PCDATA)>

<!-- A 16-bit hexadecimal integer representing the type of a cell on the Board
(equal to the upper 16 bits of the state).
Determines the type of the cell, i.e. its color, its name, the rate and manner in which it is updated, etc. -->
<!ELEMENT hextype (#PCDATA)>

<!-- A Board is a square array of cells whose edge length ("size") must be a power of 2.

The Board has a clock that is measured in <i>microticks</i> ("t"),
a grammar of update rules ("grammar"),
an optional move queue ("queue") and random number seed ("seed").

Cells are empty (zero) by default, unless specifically initialized ("init"). -->
<!ELEMENT board (size,depth?,t?,grammar,contest?,init*,queue?,seed?)>

<!ELEMENT size (#PCDATA)>
<!ELEMENT depth (#PCDATA)>

<!-- A grammar consists of a set of optional subroutines ("subrule")
 and a set of particle definitions ("particle"). -->
<!ELEMENT grammar (schemedef*,subrule*,particle+)>

<!-- Info about the win condition -->
<!ELEMENT contest (type,var,incumbent?,challenger?)>
<!ELEMENT incumbent (#PCDATA)>
<!ELEMENT challenger (#PCDATA)>

<!-- Initialize a particular cell on the Board. -->
<!ELEMENT init (x,y,(state|hexstate|type|hextype|gstate|gvars))>

<!-- Seed the random number generator. -->
<!ELEMENT seed (#PCDATA)>

<!-- The move queue (for replaying moves). -->
<!ELEMENT queue (move*)>
<!ELEMENT move (t,x,y,(state|hexstate|gstate|gvars))>

<!-- A time on the Board clock. Measured in microticks. -->
<!ELEMENT t (#PCDATA)>

<!-- An elementary particle in the game, identified by a unique 16-bit type ID ("type").
Each particle has its own update rate ("rate") and rule ("rule"),
up to three color rules for rendering ("colrule"),
and optionally a message dispatch table ("dispatch").

Any given instance of a particle has 48 additional bits of instance-specific state.
These 48 bits are conventionally split amongst a series of <i>Vars</i>:
named bit-fields of different widths ("vars").

By default, particles are updated asynchronously and randomly, but they optionally may be synchronized ("sync").
 -->
<!ELEMENT particle (scheme|(name,(type|hextype)?,vars?,readonly*,colrule*,sync?,rate?,rule,dispatch*))>

<!-- Scheme code -->
<!ELEMENT scheme (#PCDATA)>

<!-- Read-only variables. Any particle can have an unlimited number of these.

They are stored in 64-bit chunks and can effectively be accessed as higher bits of the particle's state. -->
<!ELEMENT readonly (index?,(state|hexstate|gstate|gvars))>
<!ELEMENT index (#PCDATA)>

<!-- Synchronously updated particles. -->
<!ELEMENT sync (period?,phase?)>
<!ELEMENT period (#PCDATA)>
<!ELEMENT phase (#PCDATA)>

<!-- A rule for computing the color of a particle. The formula is

<pre>
   hsb24 = (((state >> rshift) & mask) * mul) + inc
</pre>

where "hsb24" is a 24-bit HSB color value. -->
<!ELEMENT colrule (scheme|((var?|(mask?,rshift?)),(mul|hexmul)?,(inc|hexinc)?))>
<!-- A decimal multiplier. -->
<!ELEMENT mul (#PCDATA)>
<!-- A hexadecimal multiplier. -->
<!ELEMENT hexmul (#PCDATA)>
<!-- A decimal offset. -->
<!ELEMENT inc (#PCDATA)>
<!-- A hexadecimal offset. -->
<!ELEMENT hexinc (#PCDATA)>
<!-- A register offset. -->
<!ELEMENT reginc (#PCDATA)>

<!-- Variable (<i>Vars</i>) declarations. -->
<!ELEMENT vars (varsize*)>
<!-- A variable (<i>Vars</i>) declaration,
 including the name ("name") and the number of bits the variable uses ("size"). -->
<!ELEMENT varsize (name,size)>

<!-- A particle update rule. There are six types (of which only four are public),
 constituting an extremely minimal and predictable programming language for cellular automata.

The four public rules are <b>switch</b>, <b>modify</b>, <b>random</b>, and <b>deliver</b>:
<ul><li>
 <b>switch</b>
  (read a Var from any local cell,
   look up corresponding rule in a table,
   execute that rule).
</li><li>
 <b>modify</b>, effectively a <i>load-add-store</i> instruction
  (read a Var from any local cell,
   add or subtract a certain amount,
   store value in Var of any local cell).
</li><li>
 <b>random</b>, introducing stochasticity
  (executes one of two child rules by flipping a biased coin).
</li><li>
 <b>deliver</b>, which sends a 64-bit <i>message</i> to a local cell
  (passing control to an update rule in that particle's dispatch table).
</li></ul>

 -->
<!ELEMENT rule (subrule*,(scheme|switch|compare|modify|deliver|random|load|goto|nop))>
<!ATTLIST rule name CDATA #IMPLIED>

<!-- A subrule is just a rule that is not executed -->
<!ELEMENT subrule (subrule*,(scheme|switch|compare|modify|deliver|random|load|goto|nop))>
<!ATTLIST subrule name CDATA #REQUIRED>

<!-- NOP rule. -->
<!ELEMENT nop EMPTY>

<!-- Switch rule.

First calculates
<pre>
var = ((cell[pos] & mask) >> rshift)
</pre>

where "pos" is a local offset. Then looks up the corresponding "case"
for "var", and executes that rule. If no such "case" exists,
executes the "default" rule. -->
<!ELEMENT switch (pos?,(mask|vmask|tmask)?,(rshift|vrshift)?,(case*|regindex),low?,high?,default?)>

<!ELEMENT rshift (#PCDATA)>
<!ELEMENT vrshift (type,var)>

<!-- An individual case in a switch rule. -->
<!ELEMENT case ((state|hexstate|gtype|gstate|gvars)?,rule)>

<!-- Register for indirect switch rule. -->
<!ELEMENT regindex (#PCDATA)>

<!-- The default cases in a switch rule. -->
<!ELEMENT low (rule)>
<!ELEMENT high (rule)>
<!ELEMENT default (rule)>

<!-- Compare rule. -->
<!ELEMENT compare (pos?,(mask|vmask|tmask)?,(rshift|vrshift)?,regindex,(lt|leq|eq|neq|geq|gt)+)>
<!ELEMENT lt (rule)>
<!ELEMENT leq (rule)>
<!ELEMENT eq (rule)>
<!ELEMENT neq (rule)>
<!ELEMENT geq (rule)>
<!ELEMENT gt (rule)>

<!-- Modify rule.

First does the following (pseudocode):
<pre>
  oldVar = ((cell[src] & srcmask) >> rshift);
  newVar = oldVar + inc;
  cell[dest] = (cell[dest] & (0xffffffffffffffff ^ destmask)) | (((newVar) << lshift) & destmask);
</pre>

This is equivalent to reading a Var from cell "src", adding "inc", and storing in a Var in cell "dest".
("src" and "dest" are co-ordinate offsets to the cell whose rule is being executed.)

After this, the (optional) "next" rule is executed. -->
<!ELEMENT modify (src?,(srcmask|vsrcmask|tsrcmask)?,(rshift|vrshift)?,(inc|hexinc|reginc|gtype|gstate|gvars)?,(lshift|vlshift)?,(destmask|vdestmask|tdestmask)?,dest?,next?)>
<!ELEMENT src (x?,y?,z?)>
<!ATTLIST src mode (direct|indirect) #IMPLIED>
<!ELEMENT dest (x?,y?,z?)>
<!ATTLIST dest mode (direct|indirect) #IMPLIED>
<!-- A 64-bit hexadecimal mask. -->
<!ELEMENT srcmask (#PCDATA)>
<!ELEMENT vsrcmask (type,var)>
<!ELEMENT tsrcmask EMPTY>
<!-- A 64-bit hexadecimal mask. -->
<!ELEMENT destmask (#PCDATA)>
<!ELEMENT vdestmask (type,var)>
<!ELEMENT tdestmask EMPTY>
<!ELEMENT lshift (#PCDATA)>
<!ELEMENT vlshift (type,var)>
<!ELEMENT next (rule)>

<!-- Deliver rule.

Delivers a message to the dispatch table of a neighboring cell ("pos"). -->
<!ELEMENT deliver (pos,message)>
<!-- A string message. -->
<!ELEMENT message (#PCDATA)>

<!-- Load-registers rule. -->
<!ELEMENT load (register+,next)>
<!ELEMENT register (index,state)>

<!-- Goto rule.

Executes a specified rule. -->
<!ELEMENT goto (#PCDATA)>

<!-- Random rule.

Randomly executes either the "pass" or "fail" rule (with probability "prob" of it being the "pass" rule). -->
<!ELEMENT random (prob?,pass?,fail?)>
<!ELEMENT pass (rule)>
<!ELEMENT fail (rule)>
<!ELEMENT prob (#PCDATA)>

<!-- An entry in a particle's message dispatch table. -->
<!ELEMENT dispatch (msg,rule)>
