Model-View-Controller architecture

Model
-----

Local database:
User table (UserID, UserName, MainRole, Cash)
User inventory table (UserName, TypeName, PixelCount)
World metadata table (WorldID, WorldName, WorldOwnerName, BoardSize, BoardTime, BoardLockExpiryTime, BoardLockCount, BoardLockCreatorName)

S3 bucket (or local filesystem):
type/TypeName = type/CreatorName/RestOfTypeName
image/ImageName
world/board/WorldID
world/game/WorldID
world/compiled/WorldID

Comments:

WorldID, UserID
 These are 48-bit integer primary keys.

BoardName
 This string is never used as a key, and is not required to be unique.

UserName, TypeName
 These are strings that must be unique.
 Allowed characters in UserName: [A-Za-z0-9_.]
 TypeName always has the format "CreatorName/TypeNoun" where CreatorName is a UserName

MainRole: Player < Creator

Times (StartTime, ExpirationTime, NextAvailableCheckoutTime, MoveTime)
 board-specific, but generally 64-bit integers measuring (approx) nanoseconds of on-time since deployment.

Cash amounts (CashLevel, CashValue) are measured in virtual dollars, at parity with US$.

XML contents of bucket/filesystem:
type/CreatorName/TypeNoun  leads to  <particle>
world/board/WorldID  leads to a  <board>  block in proto.dtd
world/game/WorldID  leads to the outer part of a  <game>  block in proto.dtd, excluding the  <board>
world/compiled/WorldID  leads to the  <board>  block in game.dtd

Other contents of bucket/filesystem:
image/ImageName  -- PNG images


Grammar extensions to support multiplayer:

user-particle (similar to particle, but no sane-vars; instead, 48-bit var field reserved for UserID)
player-gstate (similar to gstate, but UserID set to player's ID)
owner-gstate (similar to gstate, but UserID set to World owner's ID)



Views
-----

Resource representations (need a DTD for each of these):

Lock: (LockID, WorldID, LockOwnerID, ExpirationTime)
World: (WorldID, LockID?, WorldOwnerID, NextAvailableCheckoutTime, Game, OwnershipGoal)
Turn: (MoveLog, UpdatedBoard)
Type: (TypeDependency*, TypeImageName, TypeParticle)
Price: (TypeName, CashPerPixel)
Status: (UserName, AvatarImageName, AllowedRole+, OwnedWorldID*, CashLevel, (TypeName,PixelsOwned)+)
PixelPurchase: (BuyerName, TypeName, CashAmount)

Comments:

The appearance of a "lock collection" is maintained as a RESTful illusion; there can only ever be at most one lock per board.
LockID is just the lock count.

GameData is synthesized dynamically from BucketURLPrefix/world/(game|board|compiled)/*
If player doesn't have a lock, world/game/ & world/board/ are used, and the view conforms to proto.dtd.
If player has lock, world/game/ & world/compiled/ are used, view conforms to game.dtd.

Cash amounts are measured in virtual dollars, at parity with US$.


Controller
----------

RESTful HTTP operations & responses.
All can return 401 Unauthorized for authentication (incl. challenge URL)

GET lock/WorldID  -->  303 See Other --> GET lock/WorldID/LockID, 404 Not Found
GET lock/WorldID/LockID  -->  200 Success + Lock, 404 Not Found
POST lock/WorldID (null)  -->  200 Success + Lock (board compiled), 404 Not Found (bad WorldID), 408 Request Timeout (failed to compile board), 423 Locked (someone else's lock), 409 Conflict (too soon since last lock)
DELETE lock/WorldID/LockID  -->  204 No Content (success), 404 Not Found (bad WorldID or LockID), 410 Gone (timeout)

GET world/WorldID  -->   200 Success + World (if lock is yours, includes tools), 404 Not Found (bad WorldID)

POST turn/WorldID (Turn) -->  204 No Content (success), 410 Gone (timeout), 423 Locked (not your lock), 403 Forbidden (illegal turn), 402 Payment Required

GET type/TypeName  -->  200 Success + Type (proxies S3 bucket/filesystem), 404 Not Found (bad TypeName)
PUT type (Type)  -->  201 Success + Type, 405 Method Not Allowed (type exists), 403 Forbidden (no designer privileges, not your namespace, etc), 402 Payment Required

GET price/TypeName  -->  200 Success + Type (for the moment just returns default price), 404 Not Found (bad TypeName)

GET status  -->  200 Success + Status
GET status/UserID  -->  200 Success + Status, 404 Not Found (bad UserID)

PUT buy  (PixelPurchase)  -->  201 Success, 402 Payment Required, 404 Not Found
