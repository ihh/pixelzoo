Model-View-Controller architecture

Model
-----

See sql/zoo.sql.


Views
-----

Resource representations (need a DTD and a Template Toolkit View+template for each of these):

Lock: (LockID, WorldID, LockOwnerUserID, ToolName+, ExpirationTime)
WorldStatus: (WorldID, LockID?, WorldOwnerUserID, NextAvailableCheckoutTime, OwnershipGoal)
Turn: (PlayerUserID, LockID, MoveLog, UpdatedBoard, UpdatedWorldOwnerUserID)
Type: (TypeDependency*, TypeImageName, Particle)
Price: (TypeName, CashPerPixel)
Status: (UserID, UserName, AvatarImageName, AllowedRole+, OwnedWorldID*, CashLevel, (OwnedPixelTypeName,NumberOfPixelsOwned)+, NextPixelPurchaseOrderID)
PixelPurchaseOrder: ((UserID, OrderID, TypeName, CashAmount)+)
Image: SVG

WorldGame = Game without Board
Tool, Game, Board, Proto, etc. as per current definitions.

Comments:

The appearance of a "lock collection" is maintained as a RESTful illusion; there can only ever be at most one lock per board.
LockID is just the lock count.

Game data is synthesized dynamically from BucketURLPrefix/world/(owner|guest|board)/WorldID
If player doesn't have a lock, world/guest/ or world/owner/ is combined with world/board/, and the view conforms to proto.dtd.
If player has lock, world/game/ & world/compiled/ are used, view conforms to game.dtd.

Cash amounts are measured in virtual dollars, at parity with US$.



Controllers
-----------

RESTful HTTP operations & responses.
All can return 401 Unauthorized for authentication (incl. challenge URL)

World controller
----------------

GET world/WorldID/board  -->    200 Success + Board (HTTP headers: "Last-Modified"=last move), 404 Not Found (bad WorldID)
GET world/WorldID/status  -->   200 Success + WorldStatus (HTTP headers: "Last-Modified"=last change of owner), 404 Not Found (bad WorldID)
GET world/WorldID/owner  -->    200 Success + WorldGame, 404 Not Found (bad WorldID)
GET world/WorldID/guest  -->    200 Success + WorldGame, 404 Not Found (bad WorldID)
GET world/WorldID/view  -->     200 Success + Game (assembles & compiles board without any Tools), 404 Not Found (bad WorldID), 408 Request Timeout

GET world/WorldID/lock  -->  303 See Other --> GET world/WorldID/lock/LockID, 404 Not Found
POST world/WorldID/lock (ToolName+)  -->  201 Created + Lock (HTTP headers: "Location: world/WorldID//lock/LockID"), 404 Not Found (bad WorldID), 408 Request Timeout (assembly fail), 423 Locked (someone else's lock), 409 Conflict (too soon since last lock)

GET world/WorldID/lock/LockID  -->  200 Success + Lock (HTTP headers: "Expires"=expiration time, "Last-Modified"=creation time), 404 Not Found
DELETE world/WorldID/lock/LockID  -->  204 No Content (success), 404 Not Found (bad WorldID or LockID), 410 Gone (lock expired)

GET world/WorldID/lock/LockID/proto  -->   200 Success + Proto (HTTP headers: "Last-Modified"=lock creation time), 404 Not Found (bad WorldID or LockID)
GET world/WorldID/lock/LockID/compiled  -->   200 Success + Game (HTTP headers: same as proto) (compiles, caches results), 404 Not Found (bad WorldID or LockID), 408 Request Timeout (failed to compile)

POST world/WorldID/turn (Turn) -->  204 No Content (success), 410 Gone (lock expired), 423 Locked (not your lock), 403 Forbidden (illegal turn), 402 Payment Required, 413 Request Entity Too Large


Store controller
----------------

GET store/type/TypeName  -->  200 Success + Type (HTTP headers: "Last-Modified"), 404 Not Found (bad TypeName)
PUT store/type/TypeName (Type)  -->  204 No Content (success), 403 Forbidden (no coder/hacker privileges), 402 Payment Required, 413 Request Entity Too Large
POST store/type (Type)  -->  403 Forbidden (currently unimplemented; eventually, redirect internally to "PUT store/type/TypeName" and return a 303 to "GET store/type/TypeName")

GET store/tool/ToolName  -->  200 Success + Tool (HTTP headers: "Last-Modified"), 404 Not Found (bad ToolName)
PUT store/tool/ToolName (Tool)  -->  204 No Content (success), 403 Forbidden (no smith/maker privileges), 402 Payment Required, 413 Request Entity Too Large
POST store/tool (Tool)  -->  403 Forbidden (currently unimplemented; eventually, redirect internally to "PUT store/tool/ToolName" and return a 303 to "GET store/tool/ToolName")

GET store/image/ImageName  -->  200 Success + Image (HTTP headers: "Last-Modified"), 404 Not Found (bad ImageName)
PUT store/image/ImageName (Image)  -->  204 No Content (success), 403 Forbidden (no artist/vandal privileges), 402 Payment Required, 413 Request Entity Too Large
POST store/image (Image)  -->  403 Forbidden (currently unimplemented; eventually, redirect internally to "PUT store/image/ImageName" and return a 303 to "GET store/image/ImageName")

GET store/price/TypeName  -->  200 Success + Type (HTTP headers: "Expires") (for the moment just returns default price), 404 Not Found (bad TypeName)

GET store/order  -->  200 Success + PixelPurchaseOrder (HTTP headers: "Last-Modified"=time of last pixel purchase) (account history)
POST store/order  (PixelPurchaseOrder)  -->  201 Success, 402 Payment Required, 404 Not Found


User controller
---------------

GET user/UserID/status  -->  200 Success + Status, 404 Not Found (bad UserID)
