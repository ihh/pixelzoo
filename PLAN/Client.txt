Kids are getting bored, no way this ship runs without fuel. Clear breathing comes first.
Then, a realistic (slow but steady) progress rate.


Multiscale cellular automata using a quadtree-type structure at each Z-layer.
Effectively a new dimension, Scale, that runs from 0 (finest resolution) up to lg(Size) (one cell per layer)
boardIndex(Size,X,Y,Z,Scale)  c.f. quadNodeIndex & totalQuadTreeNodes in quadtree.c (Scale = K - level)
LocalOffset(DeltaX,DeltaY,DeltaZ,DeltaScale)  first applies Delta(X,Y,Z), then DeltaScale; for zoom-out (DeltaScale>0), just truncate bits; zoom-in (DeltaScale<0), use random bits




Show tool name when tool selected
Scheme functions for generating sprite names (from vars & SXML blob)
Scheme function returning "examine" text
Scheme function to create text balloons


pzchibi is still segfaulting, e.g.
 > (define b (Board-new 128 1))
 > b
 #<Object>
 > b
 ^C [hangs]
Reproducible as 'make pzchibi-bug'.
Make a small test file that reproduces the bug & can be compiled to latest chibi on Google Code. (Either start from scratch or copy&paste key functions from board.c.)
Diagnose in XCode - catches some memory leaks, unsafe free's, etc.

(Disabling type-checking for Board* seems to work for now, but bugs might indicate memory corruption behind the scenes, so need to be preserved for investigation.)


ProtoTable-level set!
 - board size (integer), board depth (integer), random number generator (32-bit int), xy-bounding box of current view area, particle names (int->string), particle types (string->int), and particle varSizes (string->(string->int))
  - NB an avatar is simply a Scheme-scripted agent that uses A* pathfinding to attempt to run to center of current view area
  - Need to record the bounding box of the current view area in the move log

Another ProtoTable-level set!  (ptbwsk=particle,type,bitfield,width,shift,key)
 Board-proto-table --> (("empty" (p (t 0))) ("wall" (p (t 5) (b (w 5) (s 0) (k "hue")))) ...)      i.e. an assoc list of the form ((name (p (t T) (b (w W) (s S) (k K)))*)*)
...then all the following can be implemented in Scheme...
Combine (Board-set-state 1 2 3 ...) and (Board-set-meta 1 2 3 ...) into a single integrated function  (cxyzvd=cell,xcoord,ycoord,zcoord,value,data)
 (Board-set 1 2 3 (wall (hue 23)) (meta (inform (ation))))  (wraps Board-set-proto)
 (Board-set-proto (c (x 1) (y 2) (z 3)) (p (n wall) (b (k hue) (v 23)) (d (meta (inform (ation))))))   (verifies using Board-proto-table, wraps Board-set-typed)
 (Board-set-typed (c (x 1) (y 2) (z 3)) (p (t 5) (b (w 5) (s 0) (v 23)) (d (meta (inform (ation))))))   (wraps Board-get-state, Board-set-state and Board-set-meta)
 (Board-get-typed (c (x 1) (y 2) (z 3))) --> (p (t 5) (n wall) (b (w 5) (s 0) (k hue) (v 23)) (d (meta (inform (ation)))))  (wraps Board-get-state and Board-get-meta, uses Board-proto-table to decorate)





Tool rationing:
- Tool levels should be stored in database, and recharges applied for period while world offline.
- This, along with incumbent/challenger tool differences, should be sufficient to implement basic social play.
- PROTECTED WORLDS: worldmeta setting allowing incumbent to revert challengers' moves. For social play.

TEMPORAL ZOOMING MECHANIC: at zoomed-in scales, animations & sound FX play, board runs slower


Allow Particle rates to be influenced by state of var (e.g. as a generalization of a fixed rate/asyncFiringRate, offer a C array of such rates, indexed by a named var; or use linear scaling (var+1)/(1<<width) .. log scaling is easy to create with a macro)
- Look up rate in writeBoardStateUnguardedFunction when updating bin trees

Add SwapRule that swaps two cells (state + meta)
Syntax for read-only bits: global Particle vars


Delete AutoHash, Level, Grammar, simplezoo, polyzoo, zoocompiler from project
Delete Zoo/dtd/proto.dtd

Add a default handler to <deliver> rules, so particles that don't implement the rule can be given some default behavior
Allow <deliver> to get message from a register

Modify "world/" controller (authenticated) to list created, owned & neighboring worlds, together with expiry times for active locks & deletion times for any of your old locks
Modify Worlds menu to show up to 3 sections (omitting empty sections): 1) worlds that you control, 2) neighbors of worlds you control, 3) worlds you created

Automatically create one new world per player, at registration time
Add an accomplishments table, also player_accomplishments and worldmeta_required_accomplishments (which determines which worlds you can create)
Add Scheme functions for awarding accomplishments, cash, world creation credits (need to figure out generic but simple reward structure here)

Add (x,y) coordinates for each world, and table of inter-world links (or travel radius?)
Add Galaxy Map view to world info screen; can use this to select neighbors of worlds you control, changing world info view to those neighbors (alternative to selecting via Worlds menu)

Replace current 2D (X*Y) board with 3D slab of height 2 (X*Y*2), allowing for "ground".

Change lock text to be consistent with narrative (e.g. "(creating Einstein-Rosen bridge)", "Orbital exit in 1:00"...)

Add an alert with informative error message for failed lock (rather than just popping)
Add graceful failure modes (alert-then-pop-after-appear) for all NSURLConnection's

Implement ultra-basic, unsafe version of "PUT store/type", with clientside specification of particle dependencies, which automatically associates the Particle with a Tool (using particle_tool table) and adds this tool to a hardwired "experimental toolbox"
Add an experimental world + worldmeta hardwired to use the experimental toolbox
Using PegJS, implement an ultra-basic drag-and-drop reaction-diffusion grammar editor, using isometric tiles to represent AB->CD rules and logarithmic sliders for rates (no safety checks, just uses "UserID/" as a prefix on particle names to avoid clashes)

Design some new particle content: a voter-process scintillating wall + spraytool, an SIR zombie model
Port cyclobs, cement, wall, plants, guests to Scheme

Optimization: add bit buffer to Mersenne Twister (included when serializing/initializing seed state)

Conceptually, the 7 Rules with their various addressing modes & options can be implemented using lower-level primitives:
-ARM opcodes for load/store (LDR/STR), arithmetic (ADD/SUB), bit-packing/unpacking (BFI/UBFX), and conditional branch (BLT/BLE/BGT/BGE/BEQ/BNE).
-Subroutines: Mersenne twister, board accessors.
This closeness to assembly language is useful for giving rigorous performance guarantees.
In practise, generating C code directly from the 7 Rules, and then compiling that, would probably generate faster/smaller code than a hand-crafted assembler.

