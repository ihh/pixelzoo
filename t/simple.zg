#define RandomStep(DX,DY,STEP,OSTEP,DIE,ODIE)			\
  {								\
    <rate STEP>;						\
    <overload OSTEP>;						\
    loc orig(0,0);						\
    loc next(DX,DY);						\
    temp swap;							\
    if next.type = empty;					\
    do swap = next;						\
    do next = orig <fail (DIE/STEP)> <overload (ODIE/OSTEP)>;	\
    do orig = swap;						\
  }								\

#define MooreWalk(STEP,OSTEP,DIE,ODIE)		\
  RandomStep(+1,0,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));		\
  RandomStep(-1,0,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));		\
  RandomStep(0,+1,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));		\
  RandomStep(0,-1,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));		\

#define BishopWalk(STEP,OSTEP,DIE,ODIE)		\
  RandomStep(+1,+1,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));	\
  RandomStep(-1,+1,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));	\
  RandomStep(+1,-1,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));	\
  RandomStep(-1,-1,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));	\

#define NeumannWalk(STEP,OSTEP,DIE,ODIE)	\
  MooreWalk((STEP/2),(OSTEP/2),(DIE/2),(ODIE/2));		\
  BishopWalk((STEP/2),(OSTEP/2),(DIE/2),(ODIE/2));		\

#define CementSetDir(DX,DY,DRYRATE,WETRATE)		\
  {							\
    <rate DRYRATE>;					\
    loc orig(0,0);					\
    loc next(DX,DY);					\
    if next.type = wall <ignore (WETRATE/DRYRATE)>;	\
    do orig = wall;					\
  }							\

#define CementSet(DRYRATE,WETRATE)	\
  CementSetDir(+1,0,(DRYRATE/4),(WETRATE/4));	\
  CementSetDir(-1,0,(DRYRATE/4),(WETRATE/4));	\
  CementSetDir(0,+1,(DRYRATE/4),(WETRATE/4));	\
  CementSetDir(0,-1,(DRYRATE/4),(WETRATE/4));	\
  CementSetDir(+1,+1,(DRYRATE/4),(WETRATE/4));	\
  CementSetDir(-1,+1,(DRYRATE/4),(WETRATE/4));	\
  CementSetDir(+1,-1,(DRYRATE/4),(WETRATE/4));	\
  CementSetDir(-1,-1,(DRYRATE/4),(WETRATE/4));	\

#define CementSpeed .1
#define CementDrainRate  (CementSpeed/10)
#define CementChoke      (CementSpeed)
#define CementWetSetRate (CementSpeed*12)
#define CementDrySetRate (CementWetSetRate/100)

type cement;
NeumannWalk(CementSpeed,CementSpeed,CementDrainRate,CementChoke);
CementSet(CementWetSetRate,CementDrySetRate);

type wall decay(4);
bri = 255 - decay*8;
{
  <rate .0002>;
  loc orig(0,0);
  if orig.decay < 15;
  do orig.decay = orig.decay + 1;
  text "decay" <rate .01> <hue 32>;
}

{
  <rate .01>;
  loc orig(0,0);
  if orig.decay = 15;
  do orig = empty;
}

#define AcidBurnDir(DX,DY,RATE)			\
  {						\
    <rate RATE>;				\
    loc orig(0,0);				\
    loc next(DX,DY);				\
    if next.type != empty;			\
    do next = empty;				\
    do orig = empty;				\
  }						\

#define AcidBurn(RATE)		\
  AcidBurnDir(+1,0,(RATE/8));	\
  AcidBurnDir(-1,0,(RATE/8));	\
  AcidBurnDir(0,+1,(RATE/8));	\
  AcidBurnDir(0,-1,(RATE/8));	\
  AcidBurnDir(+1,+1,(RATE/8));	\
  AcidBurnDir(-1,+1,(RATE/8));	\
  AcidBurnDir(+1,-1,(RATE/8));	\
  AcidBurnDir(-1,-1,(RATE/8));	\

#define AcidSpeed .5
#define AcidStep      (AcidSpeed/2)
#define AcidDrainRate (AcidSpeed/10)
#define AcidBurnRate  (AcidSpeed/2)
#define AcidOverload  (AcidSpeed)

type acid;
bri = 128;
NeumannWalk(AcidStep,AcidStep,AcidDrainRate,AcidOverload);
AcidBurn(AcidBurnRate);

#define DirectedStep(DX,DY,DIR,STEP,OSTEP,DIE,ODIE)	\
  {							\
    <rate STEP>;					\
    <overload OSTEP>;					\
    loc orig(0,0);					\
    loc next(DX,DY);					\
    temp swap;						\
    if orig.dir = DIR;					\
    if next.type = empty;				\
    do swap = next;					\
    do next = orig <fail DIE> <overload ODIE>;		\
    do orig = swap;					\
  }							\

#define DirectedTurn(TYPE,DX,DY,DIR,DIRINC,RATE,SPONTANEOUS)	\
  {								\
    <rate RATE>;						\
    loc orig(0,0);						\
    loc next(DX,DY);						\
    if orig.dir = DIR;						\
    if next.type != empty <ignore (SPONTANEOUS/RATE)>;		\
    if next.type != TYPE <ignore (SPONTANEOUS/RATE)>;		\
    do orig.dir = orig.dir + DIRINC;				\
  }								\

#define DirectedTurns(TYPE,DX,DY,DIR,TURN,REVERSE,SPONTANEOUS)		\
  DirectedTurn(TYPE,DX,DY,DIR,+1,(TURN/2),(SPONTANEOUS/3));		\
  DirectedTurn(TYPE,DX,DY,DIR,-1,(TURN/2),(SPONTANEOUS/3));		\
  DirectedTurn(TYPE,DX,DY,DIR,+2,REVERSE,(SPONTANEOUS/3));		\

// dir: 0=north, 1=east, 2=south, 3=west
// Moore topology random walk with direction
#define MooreDirectedWalk(TYPE,STEP,OSTEP,DIE,ODIE,TURN,REVERSE,SPONTANEOUS) \
  DirectedStep(0,-1,0,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));				\
  DirectedStep(+1,0,1,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));				\
  DirectedStep(0,+1,2,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));				\
  DirectedStep(-1,0,3,(STEP/4),(OSTEP/4),(DIE/4),(ODIE/4));				\
  DirectedTurns(TYPE,0,-1,0,(TURN/4),(REVERSE/4),(SPONTANEOUS/4));			\
  DirectedTurns(TYPE,+1,0,1,(TURN/4),(REVERSE/4),(SPONTANEOUS/4));			\
  DirectedTurns(TYPE,0,+1,2,(TURN/4),(REVERSE/4),(SPONTANEOUS/4));			\
  DirectedTurns(TYPE,-1,0,3,(TURN/4),(REVERSE/4),(SPONTANEOUS/4));			\

// flock
#define FlockDir(TYPE,X,Y,RATE)				\
  {							\
  <rate RATE>;						\
  loc orig(0,0);					\
  loc nbr(X,Y);						\
  if nbr.type = TYPE;					\
  do orig.dir = nbr.dir;				\
  }							\

#define Flock1(TYPE,RATE)					\
  FlockDir(TYPE,-1,-1,(RATE/8));				\
  FlockDir(TYPE,-1,0,(RATE/8));					\
  FlockDir(TYPE,-1,+1,(RATE/8));				\
  FlockDir(TYPE,0,-1,(RATE/8));					\
  FlockDir(TYPE,0,+1,(RATE/8));					\
  FlockDir(TYPE,+1,-1,(RATE/8));				\
  FlockDir(TYPE,+1,0,(RATE/8));					\
  FlockDir(TYPE,+1,+1,(RATE/8));				\

#define Flock2(TYPE,RATE)					\
  Flock1(TYPE,(RATE/3));					\
  FlockDir(TYPE,-2,-2,(RATE/24));				\
  FlockDir(TYPE,-2,-1,(RATE/24));				\
  FlockDir(TYPE,-2,0,(RATE/24));				\
  FlockDir(TYPE,-2,+1,(RATE/24));				\
  FlockDir(TYPE,-2,+2,(RATE/24));				\
  FlockDir(TYPE,-1,-2,(RATE/24));				\
  FlockDir(TYPE,-1,+2,(RATE/24));				\
  FlockDir(TYPE,0,-2,(RATE/24));				\
  FlockDir(TYPE,0,+2,(RATE/24));				\
  FlockDir(TYPE,+1,-2,(RATE/24));				\
  FlockDir(TYPE,+1,+2,(RATE/24));				\
  FlockDir(TYPE,+2,-2,(RATE/24));				\
  FlockDir(TYPE,+2,-1,(RATE/24));				\
  FlockDir(TYPE,+2,0,(RATE/24));				\
  FlockDir(TYPE,+2,+1,(RATE/24));				\
  FlockDir(TYPE,+2,+2,(RATE/24));				\

// "strafe" (sidestep)
#define StrafeDir(DX,DY,DIR,STRAFEX,STRAFEY,RATE)	\
  {							\
  <rate RATE>;						\
  loc orig(0,0);					\
  loc next(DX,DY);					\
  loc strafe(STRAFEX,STRAFEY);				\
  if orig.dir = DIR;					\
  if next.type != empty;				\
  if strafe.type = empty;				\
  do strafe = orig;					\
  do orig = empty;					\
  }							\

#define Strafe(RATE)					\
  StrafeDir(0,-1,0,+1,0,(RATE/8));			\
  StrafeDir(0,-1,0,-1,0,(RATE/8));			\
  StrafeDir(+1,0,1,0,+1,(RATE/8));			\
  StrafeDir(+1,0,1,0,-1,(RATE/8));			\
  StrafeDir(0,+1,2,-1,0,(RATE/8));			\
  StrafeDir(0,+1,2,+1,0,(RATE/8));			\
  StrafeDir(-1,0,3,0,-1,(RATE/8));			\
  StrafeDir(-1,0,3,0,+1,(RATE/8));			\

#define NomadType    nomad
#define NomadSpeed   .06
#define NomadStep    (NomadSpeed/3)
#define NomadDie     (NomadSpeed/60)
#define NomadChoke   (NomadSpeed/15)
#define NomadTurn    (NomadSpeed/9)
#define NomadReverse (NomadSpeed/18)
#define NomadTumble  (NomadSpeed/60)
#define NomadFlock   (NomadSpeed/3)
#define NomadStrafe  (NomadSpeed/9)

type NomadType dir(2);
hue = 30 + dir * 2;
sat = 255;
bri = 255;
MooreDirectedWalk(NomadType,NomadStep,NomadStep,NomadDie,NomadChoke,NomadTurn,NomadReverse,NomadTumble);
Flock2(NomadType,NomadFlock);
Strafe(NomadStrafe);

#define ReorientTarget(TYPE,DX,DY,DIR,RATE)	\
  {						\
    <rate RATE>;				\
    loc self(0,0);				\
    loc target(DX,DY);				\
    if target.type = TYPE;			\
    do target.dir = DIR;				\
  }						\

#define Reorient(TYPE,DISTANCE,DIR,RATE)			\
  ReorientTarget(TYPE,-DISTANCE,-DISTANCE,DIR,(RATE/8));	\
  ReorientTarget(TYPE,-DISTANCE,0,DIR,(RATE/8));		\
  ReorientTarget(TYPE,-DISTANCE,DISTANCE,DIR,(RATE/8));	\
  ReorientTarget(TYPE,0,-DISTANCE,DIR,(RATE/8));		\
  ReorientTarget(TYPE,0,DISTANCE,DIR,(RATE/8));			\
  ReorientTarget(TYPE,DISTANCE,-DISTANCE,DIR,(RATE/8));	\
  ReorientTarget(TYPE,DISTANCE,0,DIR,(RATE/8));			\
  ReorientTarget(TYPE,DISTANCE,DISTANCE,DIR,(RATE/8));		\

#define SignpostRate (NomadSpeed)
#define SignpostSize 5
#define SignpostMaxCoord 4
#define SignpostMidCoord 2
#define SignpostHue 96
#define SignpostArrowSat 127
#define SignpostBackgroundSat 0
#define SignpostBrightness 64
type signpost dir(4) sat(8);
hue = SignpostHue;
sat = 2 * sat;
bri = SignpostBrightness + sat;
Reorient(NomadType,SignpostSize,self.dir,SignpostRate);

#define BuildDirStep(DX,DY,DIR,COORD,LIMIT,INC,DIRFLAG,REVFLAG,RATE)	\
  {									\
    <rate (RATE/3)>;							\
    loc orig(0,0);							\
    loc nbr(DX,DY);							\
    if orig.dir = DIR;							\
    if orig.DIRFLAG != 0;						\
    if orig.COORD != LIMIT;						\
    if nbr.type = empty;						\
    do nbr = orig;							\
    do nbr.COORD = nbr.COORD + INC;					\
  }									\
  {									\
    <rate (RATE/3)>;							\
    loc orig(0,0);							\
    loc nbr(DX,DY);							\
    if orig.dir = DIR;							\
    if nbr.type != empty;						\
    do orig.DIRFLAG = 0;						\
  }									\
  {									\
    <rate (RATE/3)>;							\
    loc orig(0,0);							\
    if orig.COORD = LIMIT;						\
    do orig.DIRFLAG = 0;						\
  }									\

#define BuildDir(DX,DY,NEG_DX,NEG_DY,DIR,MAXCOL,MAXROW,RATE)		\
  BuildDirStep(DX,DY,DIR,row,0,-1,buildForward,buildBackward,(RATE/4));		\
  BuildDirStep(NEG_DY,DX,DIR,col,MAXCOL,+1,buildRight,buildLeft,(RATE/4)); \
  BuildDirStep(NEG_DX,NEG_DY,DIR,row,MAXROW,+1,buildBackward,buildForward,(RATE/4)); \
  BuildDirStep(DY,NEG_DX,DIR,col,0,-1,buildLeft,buildRight,(RATE/4));	\

#define Build(MAXCOL,MAXROW,RATE)			\
  BuildDir(0,-1,0,+1,0,MAXCOL,MAXROW,(RATE/4));		\
  BuildDir(+1,0,-1,0,1,MAXCOL,MAXROW,(RATE/4));		\
  BuildDir(0,+1,0,-1,2,MAXCOL,MAXROW,(RATE/4));		\
  BuildDir(-1,0,+1,0,3,MAXCOL,MAXROW,(RATE/4));		\

#define EndBuild(TEST,EXEC,RATE)		\
  {						\
    <rate RATE>;				\
    loc orig(0,0);				\
    temp builder;				\
    if orig.buildForward = 0;			\
    if orig.buildBackward = 0;			\
    if orig.buildRight = 0;			\
    if orig.buildLeft = 0;			\
    TEST;					\
    do builder = orig;				\
    EXEC;					\
  }						\


#define SignpostBuildRate 1
type signpost_builder dir(4) row(4) col(4) buildForward(4) buildBackward(4) buildLeft(4) buildRight(4);
hue = SignpostHue;
sat = 255;
bri = 32;
Build (SignpostMaxCoord, SignpostMaxCoord, (SignpostBuildRate*.3));
EndBuild (if orig.row = 2, do orig.type = signpost; do orig.sat = SignpostArrowSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.col = 2, do orig.type = signpost; do orig.sat = SignpostArrowSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.row = 1; if orig.col >= 1; if orig.col <= 3, do orig.type = signpost; do orig.sat = SignpostArrowSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.row > 2; if orig.col != 2, do orig.type = signpost; do orig.sat = SignpostBackgroundSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.row < 2; if orig.col = 0, do orig.type = signpost; do orig.sat = SignpostBackgroundSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.row < 2; if orig.col = 4, do orig.type = signpost; do orig.sat = SignpostBackgroundSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.row = 0; if orig.col != 2, do orig.type = signpost; do orig.sat = SignpostBackgroundSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));

#define OrientedSignpostBuilder(NAME,DIR,BRI)	\
  type NAME;					\
  hue = SignpostHue;				\
  sat = 255;					\
  bri = BRI;					\
  {						\
    loc orig(0,0);				\
    do orig.type = signpost_builder;		\
    do orig.col = SignpostMidCoord;		\
    do orig.row = SignpostMidCoord;		\
    do orig.dir = DIR;				\
    do orig.buildForward = 1;			\
    do orig.buildBackward = 1;			\
    do orig.buildRight = 1;			\
    do orig.buildLeft = 1;			\
  }						\

OrientedSignpostBuilder(north_signpost_builder,0,128);
OrientedSignpostBuilder(east_signpost_builder,1,96);
OrientedSignpostBuilder(south_signpost_builder,2,128);
OrientedSignpostBuilder(west_signpost_builder,3,96);

#include "poly.h"

#define PolymerRate .1
#define PolymerHue 160
type polymer lflag(4) rflag(4) ldir(4) rdir(4);
hue = PolymerHue + ldir - rdir;
sat = 255 - 64*rflag - 64*lflag;
bri = 255;
PolymerStep(polymer,poly_extender,PolymerRate);

type poly_len20;
hue = PolymerHue;
sat = 255;
bri = 255;
{
  loc orig(0,0);
  do orig.type = poly_initiator;
  do orig.len = 20;
}

type poly_initiator len(8);
hue = PolymerHue;
sat = 255;
bri = 128;
{
  loc orig(0,0);
  loc next(1,0);
  if next.type = empty;
  do next.type = poly_extender;
  do next.len = orig.len;
  do orig.type = polymer;
  do orig.lflag = 0;
  do orig.rflag = 1;
  do orig.rdir = 2;
}

type poly_extender len(8);
hue = PolymerHue;
sat = 255;
bri = 128;
{
  loc orig(0,0);
  loc next(1,0);
  if orig.len > 0;
  if next.type = empty;
  do next.type = poly_extender;
  do next.len = orig.len - 1;
  do orig.type = polymer;
  do orig.lflag = 1;
  do orig.rflag = 1;
  do orig.ldir = 6;
  do orig.rdir = 2;
}

{
  loc orig(0,0);
  if orig.len = 0;
  do orig.type = polymer;
  do orig.lflag = 1;
  do orig.rflag = 0;
  do orig.ldir = 6;
}

type entering_nomad
{
  loc orig(0,0);
  do orig.type = nomad;
  do orig.dir = 2;
}

type border;
hue = 192;
sat = 255;
bri = 255;

entrance (20,20) (type entering_nomad) (count 30) (rate 1) (width 10) (height 1);
exit (30,60) (type nomad) (count 5);

eval { map (("init ($_,40) border"), 10..40) }

eval { map (("init ($_,0) border"), 0..$boardSize-1) }
eval { map (("init ($_,@{[$boardSize-1]}) border"), 0..$boardSize-1) }
eval { map (("init (0,$_) border"), 1..$boardSize-2) }
eval { map (("init (@{[$boardSize-1]},$_) border"), 1..$boardSize-2) }

// the following nearly worked, but didn't because init's need to be inside the board. nice idea though
// xml { map (("init" => ["hexval" => "7ff", "x" => $_, "y" => 0]), 0..$boardSize-1) }
// xml { map (("init" => ["hexval" => "7ff", "x" => $_, "y" => $boardSize-1]), 0..$boardSize-1) }
// xml { map (("init" => ["hexval" => "7ff", "y" => $_, "x" => 0]), 0..$boardSize-1) }
// xml { map (("init" => ["hexval" => "7ff", "y" => $_, "x" => $boardSize-1]), 0..$boardSize-1) }

tool "Cement spray" (type cement) (reserve 1000) (size 2) (spray 100) (overwrite empty);
tool "Acid spray" (type acid) (reserve 1000) (size 4) (overwrite empty);
tool "Nomad spray" (type nomad) (reserve 1000) (size 4) (overwrite empty);

tool "North sign" (type north_signpost_builder) (reserve 1) (size 1) (spray 100) (overwrite empty);
tool "East sign" (type east_signpost_builder) (reserve 1) (size 1) (spray 100) (overwrite empty);
tool "South sign" (type south_signpost_builder) (reserve 1) (size 1) (spray 100) (overwrite empty);
tool "West sign" (type west_signpost_builder) (reserve 1) (size 1) (spray 100) (overwrite empty);

tool "Polymer" (type poly_len20) (reserve 1) (size 1) (spray 100) (overwrite empty);
