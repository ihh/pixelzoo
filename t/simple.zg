#include "std.h"
#include "poly.h"

#define CementSetDir(DX,DY,STICKRATE,SETRATE,HUE)	\
  {							\
    <rate STICKRATE>;					\
    loc orig(0,0);					\
    loc next(DX,DY);					\
    if next.type = wall;				\
    do orig = next;					\
    do orig.decay = 0;					\
    do orig.hue = HUE <fail SETRATE>;			\
  }							\
  {							\
    <rate SETRATE>;					\
    loc orig(0,0);					\
    do orig.type = wall;				\
    do orig.decay = 0;					\
    do orig.hue = HUE;					\
  }							\

#define CementSet(STICKRATE,SETRATE,HUE)		\
  CementSetDir(+1,0,(STICKRATE/4),(SETRATE/4),HUE);	\
  CementSetDir(-1,0,(STICKRATE/4),(SETRATE/4),HUE);	\
  CementSetDir(0,+1,(STICKRATE/4),(SETRATE/4),HUE);	\
  CementSetDir(0,-1,(STICKRATE/4),(SETRATE/4),HUE);	\
  CementSetDir(+1,+1,(STICKRATE/4),(SETRATE/4),HUE);	\
  CementSetDir(-1,+1,(STICKRATE/4),(SETRATE/4),HUE);	\
  CementSetDir(+1,-1,(STICKRATE/4),(SETRATE/4),HUE);	\
  CementSetDir(-1,-1,(STICKRATE/4),(SETRATE/4),HUE);	\

#define CementSpeed .1
#define CementDrainRate  (CementSpeed/10)
#define CementChoke      (CementSpeed)
#define CementStickRate  (CementSpeed)
#define CementSetRate    (CementStickRate/100)

type cement;
NeumannWalk(CementSpeed,CementSpeed,,CementDrainRate,CementChoke,0,0,);
CementSet((CementStickRate/3),(CementSetRate/3),RedHue);
CementSet((CementStickRate/3),(CementSetRate/3),YellowHue);
CementSet((CementStickRate/3),(CementSetRate/3),GreenHue);

type wall hue(8) decay(4);
hue = hue;
bri = 255 - decay*8;
sat = 32;
{
  <rate .0002>;
  loc orig(0,0);
  if orig.decay < 15;
  do orig.decay = orig.decay + 1;
  text "decay" <rate .01> <hue 32>;
}

{
  <rate .01>;
  loc orig(0,0);
  if orig.decay = 15;
  do orig = empty;
}

#define AcidBurnDir(DX,DY,RATE)			\
  {						\
    <rate RATE>;				\
    loc orig(0,0);				\
    loc next(DX,DY);				\
    if next.type != empty;			\
    do next = empty;				\
    do orig = empty;				\
  }						\

#define AcidBurn(RATE)		\
  AcidBurnDir(+1,0,(RATE/8));	\
  AcidBurnDir(-1,0,(RATE/8));	\
  AcidBurnDir(0,+1,(RATE/8));	\
  AcidBurnDir(0,-1,(RATE/8));	\
  AcidBurnDir(+1,+1,(RATE/8));	\
  AcidBurnDir(-1,+1,(RATE/8));	\
  AcidBurnDir(+1,-1,(RATE/8));	\
  AcidBurnDir(-1,-1,(RATE/8));	\

#define AcidSpeed .5
#define AcidStep      (AcidSpeed/2)
#define AcidDrainRate (AcidSpeed/100)
#define AcidBurnRate  (AcidSpeed/2)
#define AcidOverload  (AcidSpeed)

type acid;
bri = 128;
sat = 0;
NeumannWalk(AcidStep,AcidStep,,AcidDrainRate,AcidOverload,0,0,);
AcidBurn(AcidBurnRate);


#define NomadType    nomad
#define NomadSpeed   .06
#define NomadStep    (NomadSpeed/3)
#define NomadBreed   0
#define NomadDie     (NomadStep/10000)
// #define NomadDie     0
#define NomadChoke   (NomadSpeed/45)
#define NomadTurn    (NomadSpeed/9)
#define NomadReverse (NomadSpeed/18)
#define NomadTumble  (NomadSpeed/60)
#define NomadFlock   (NomadSpeed/3)
#define NomadStrafe  (NomadSpeed/9)

type NomadType dir(2);
hue = 30 + dir * 2;
sat = 255;
bri = 255;
MooreDirectedWalk(NomadType,NomadStep,NomadStep,,NomadDie,NomadChoke,NomadBreed,0,,,NomadTurn,NomadReverse,NomadTumble,);
MooreFlock2(NomadType,NomadFlock,);
MooreStrafe(NomadStrafe,);

#define ReorientTarget(TYPE,DX,DY,DIR,RATE)	\
  {						\
    <rate RATE>;				\
    loc self(0,0);				\
    loc target(DX,DY);				\
    if target.type = TYPE;			\
    do target.DIR = self.DIR;				\
  }						\


#define TransportTarget(TYPE,OLDX,OLDY,NEWX,NEWY,DIR,DIRVAL,RATE)	\
  {						\
    <rate RATE>;				\
    loc self(0,0);				\
    loc target(OLDX,OLDY);			\
    loc newTarget(NEWX,NEWY);			\
    if self.DIR = DIRVAL;				\
    if target.type = TYPE;			\
    if newTarget.type = empty;			\
    do newTarget = target;				\
    do target = empty;				\
  }						\


#define Reorient(TYPE,DISTANCE,DIR,RATE)			\
  ReorientTarget(TYPE,-DISTANCE,-DISTANCE,DIR,(RATE/9));	\
  ReorientTarget(TYPE,-DISTANCE,0,DIR,(RATE/9));		\
  ReorientTarget(TYPE,-DISTANCE,DISTANCE,DIR,(RATE/9));	\
  ReorientTarget(TYPE,0,-DISTANCE,DIR,(RATE/9));		\
  ReorientTarget(TYPE,0,DISTANCE,DIR,(RATE/9));			\
  ReorientTarget(TYPE,DISTANCE,-DISTANCE,DIR,(RATE/9));	\
  ReorientTarget(TYPE,DISTANCE,0,DIR,(RATE/9));			\
  ReorientTarget(TYPE,DISTANCE,DISTANCE,DIR,(RATE/9));		\
  TransportTarget(TYPE, 0,+1, 0,       -DISTANCE,DIR,0,(RATE/9/4));	\
  TransportTarget(TYPE,-1, 0,+DISTANCE, 0,       DIR,1,(RATE/9/4));		\
  TransportTarget(TYPE, 0,-1, 0,       +DISTANCE,DIR,2,(RATE/9/4));	\
  TransportTarget(TYPE,+1, 0,-DISTANCE, 0,       DIR,3,(RATE/9/4));	\

#define SignpostRate (NomadSpeed)
#define SignpostSize 5
#define SignpostMaxCoord 4
#define SignpostMidCoord 2
#define SignpostHue 96
#define SignpostArrowSat 127
#define SignpostBackgroundSat 0
#define SignpostBrightness 64
type signpost dir(4) sat(8);
hue = SignpostHue;
sat = 2 * sat;
bri = SignpostBrightness + sat;
Reorient(NomadType,SignpostSize,dir,SignpostRate);


#define SignpostBuildRate 1
type signpost_builder dir(4) row(4) col(4) buildForward(4) buildBackward(4) buildLeft(4) buildRight(4);
hue = SignpostHue;
sat = 255;
bri = 32;
Build (SignpostMaxCoord, SignpostMaxCoord, (SignpostBuildRate*.3));
EndBuild (if orig.row = 2, do orig.type = signpost; do orig.sat = SignpostArrowSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.col = 2, do orig.type = signpost; do orig.sat = SignpostArrowSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.row = 1; if orig.col >= 1; if orig.col <= 3, do orig.type = signpost; do orig.sat = SignpostArrowSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.row > 2; if orig.col != 2, do orig.type = signpost; do orig.sat = SignpostBackgroundSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.row < 2; if orig.col = 0, do orig.type = signpost; do orig.sat = SignpostBackgroundSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.row < 2; if orig.col = 4, do orig.type = signpost; do orig.sat = SignpostBackgroundSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));
EndBuild (if orig.row = 0; if orig.col != 2, do orig.type = signpost; do orig.sat = SignpostBackgroundSat; do orig.dir = builder.dir, (SignpostBuildRate*.1));

#define OrientedSignpostBuilder(NAME,DIR,BRI)	\
  type NAME;					\
  hue = SignpostHue;				\
  sat = 255;					\
  bri = BRI;					\
  {						\
    loc orig(0,0);				\
    do orig.type = signpost_builder;		\
    do orig.col = SignpostMidCoord;		\
    do orig.row = SignpostMidCoord;		\
    do orig.dir = DIR;				\
    do orig.buildForward = 1;			\
    do orig.buildBackward = 1;			\
    do orig.buildRight = 1;			\
    do orig.buildLeft = 1;			\
  }						\

OrientedSignpostBuilder(north_signpost_builder,0,128);
OrientedSignpostBuilder(east_signpost_builder,1,96);
OrientedSignpostBuilder(south_signpost_builder,2,128);
OrientedSignpostBuilder(west_signpost_builder,3,96);

#define PolymerRate .1
#define PolymerHue 160
type polymer lflag!(1) rflag!(1) ldir!(3) rdir!(3);
hue = PolymerHue + ldir - rdir;
sat = 255 - 64*rflag - 64*lflag;
bri = 255;
PolymerStep(polymer,poly_extender,PolymerRate);

type poly_len20;
hue = PolymerHue;
sat = 255;
bri = 255;
{
  loc orig(0,0);
  do orig.type = poly_initiator;
  do orig.len = 20;
}

type poly_initiator len(8);
hue = PolymerHue;
sat = 255;
bri = 128;
{
  loc orig(0,0);
  loc next(1,0);
  if next.type = empty;
  do next.type = poly_extender;
  do next.len = orig.len;
  do orig.type = polymer;
  do orig.lflag = 0;
  do orig.rflag = 1;
  do orig.rdir = 2;
}

type poly_extender len(8);
hue = PolymerHue;
sat = 255;
bri = 128;
{
  loc orig(0,0);
  loc next(1,0);
  if orig.len > 0;
  if next.type = empty;
  do next.type = poly_extender;
  do next.len = orig.len - 1;
  do orig.type = polymer;
  do orig.lflag = 1;
  do orig.rflag = 1;
  do orig.ldir = 6;
  do orig.rdir = 2;
}

{
  loc orig(0,0);
  if orig.len = 0;
  do orig.type = polymer;
  do orig.lflag = 1;
  do orig.rflag = 0;
  do orig.ldir = 6;
}

type entering_nomad
{
  loc orig(0,0);
  do orig.type = nomad;
  do orig.dir = 2;
}

type border;
hue = 192;
sat = 255;
bri = 255;

entrance (20,20) (type entering_nomad) (count 30) (rate 1) (width 10) (height 1);
exit (30,60) (type nomad) (count 5);

eval { map (("init ($_,40) border"), 10..40) }

eval { map (("init ($_,0) border"), 0..$boardSize-1) }
eval { map (("init ($_,@{[$boardSize-1]}) border"), 0..$boardSize-1) }
eval { map (("init (0,$_) border"), 1..$boardSize-2) }
eval { map (("init (@{[$boardSize-1]},$_) border"), 1..$boardSize-2) }

// the following nearly worked, but didn't because init's need to be inside the board. nice idea though - maybe add an extra parameter to the "xml" keyword, specifying where in the final XML it should be inserted?
// xml { map (("init" => ["hexval" => "7ff", "x" => $_, "y" => 0]), 0..$boardSize-1) }
// xml { map (("init" => ["hexval" => "7ff", "x" => $_, "y" => $boardSize-1]), 0..$boardSize-1) }
// xml { map (("init" => ["hexval" => "7ff", "y" => $_, "x" => 0]), 0..$boardSize-1) }
// xml { map (("init" => ["hexval" => "7ff", "y" => $_, "x" => $boardSize-1]), 0..$boardSize-1) }

tool "Cement spray" (type cement) (reserve 1000) (size 2) (spray 100) (overwrite empty);
tool "Acid spray" (type acid) (reserve 1000) (size 4) (overwrite empty);
tool "Nomad spray" (type nomad) (reserve 1000) (size 4) (overwrite empty);

tool "North sign" (type north_signpost_builder) (reserve 1) (size 1) (spray 100) (overwrite empty);
tool "East sign" (type east_signpost_builder) (reserve 1) (size 1) (spray 100) (overwrite empty);
tool "South sign" (type south_signpost_builder) (reserve 1) (size 1) (spray 100) (overwrite empty);
tool "West sign" (type west_signpost_builder) (reserve 1) (size 1) (spray 100) (overwrite empty);

tool "Polymer" (type poly_len20) (reserve 1) (size 1) (spray 100) (overwrite empty);

#define MaxPlantHeight 7
#define PlantGrowRate .0001
#define PlantDieRate (PlantGrowRate/2)
#define NomadEatPlantRate (2*NomadSpeed)
type plant height(3);
hue = GreenHue - height;
bri = 255 - height * 16;
sat = 255;
NeumannPair(empty,PlantGrowRate,if src.height < MaxPlantHeight,src,src,do tgt.height = tgt.height + 1);
NeumannPair(nomad,NomadEatPlantRate,,tgt,empty,);
SelfTransform((PlantDieRate/8),empty,,);
SelfTransform((PlantDieRate/4),empty,if self.height > 3,);
SelfTransform((PlantDieRate/2),empty,if self.height > 5,);
SelfTransform((PlantDieRate/8),empty,if self.height = MaxPlantHeight,);

tool "Seed" (type plant) (reserve 1) (size 1) (spray 100) (overwrite empty);
